version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      args:
        - NODE_ENV=${NODE_ENV:-production}
    container_name: language_app_backend
    restart: always
    deploy:
      replicas: ${BACKEND_REPLICAS:-2}
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=5000
      - DATABASE_URL=postgres://${DB_USER:-postgres}:${DB_PASS:-postgres}@db:5432/${DB_NAME:-language_app}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-your_sendgrid_api_key}
      - EMAIL_FROM=${EMAIL_FROM:-your_email@example.com}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-your_stripe_secret_key}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-your_stripe_webhook_secret}
      - TOKEN_REFRESH_INTERVAL=${TOKEN_REFRESH_INTERVAL:-86400} # 24 horas en segundos
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/.env:/app/.env:ro
      - backend_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - language_app_network
    healthcheck:
      test: ["CMD", "/docker-healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      args:
        - NODE_ENV=${NODE_ENV:-production}
        - VITE_API_URL=${VITE_API_URL:-/api}
    container_name: language_app_frontend
    restart: always
    volumes:
      - ./.env:/app/.env:ro
      - frontend_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - language_app_network
    healthcheck:
      test: ["CMD", "/docker-healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: language_app_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./dist:/usr/share/nginx/html
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - language_app_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: language_app_certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

  db:
    image: postgres:14-alpine
    container_name: language_app_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASS:-postgres}
      - POSTGRES_DB=${DB_NAME:-language_app}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/backup.sh:/backup.sh
      - ./backups:/backups
    networks:
      - language_app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-language_app}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  language_app_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
    name: language_app_postgres_data
  backend_logs:
    driver: local
    name: language_app_backend_logs
  frontend_logs:
    driver: local
    name: language_app_frontend_logs
  nginx_logs:
    driver: local
    name: language_app_nginx_logs
